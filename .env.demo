# Demo Configuration for Telegram Escrow Bot
# Copy this file to .env and update with your actual values

# ===== REQUIRED SETTINGS =====

# Get this from @BotFather on Telegram
BOT_TOKEN=123456789:ABCdefGHIjklMNOpqrsTUVwxyz

# Your Telegram username (optional)
BOT_USERNAME=your_bot_username

# Your Telegram User ID (get from @userinfobot)
# Add multiple admin IDs separated by commas
ADMIN_USER_IDS=123456789

# Optional: Admin chat ID for notifications
ADMIN_CHAT_ID=-1001234567890

# ===== OPTIONAL SETTINGS =====

# Application Environment
NODE_ENV=development
PORT=3000
LOG_LEVEL=info

# Storage Configuration
STORAGE_TYPE=file
STORAGE_PATH=./data
BACKUP_INTERVAL_HOURS=6

# Transaction Timeouts (in minutes/hours)
TRANSACTION_TIMEOUT_MINUTES=30
PAYMENT_VERIFICATION_TIMEOUT_HOURS=24
ACCOUNT_TRANSFER_TIMEOUT_MINUTES=15
FINAL_VERIFICATION_TIMEOUT_HOURS=2

# Security Settings
MAX_RETRY_ATTEMPTS=3
SESSION_TIMEOUT_HOURS=24
RATE_LIMIT_REQUESTS_PER_MINUTE=10

# Redis Configuration (optional - only if using Redis)
# REDIS_URL=redis://localhost:6379
# REDIS_PASSWORD=
# REDIS_DB=0

# Webhook Configuration (optional - for production)
# WEBHOOK_URL=https://yourdomain.com
# WEBHOOK_PORT=8443
# WEBHOOK_PATH=/webhook

# ===== SETUP INSTRUCTIONS =====

# 1. Create a new bot with @BotFather on Telegram:
#    - Send /newbot to @BotFather
#    - Choose a name and username for your bot
#    - Copy the bot token and paste it above

# 2. Get your Telegram User ID:
#    - Message @userinfobot on Telegram
#    - Copy your user ID and add it to ADMIN_USER_IDS

# 3. Save this file as .env (remove .demo extension)

# 4. Test your configuration:
#    node test-config.js

# 5. Start the bot:
#    npm run dev (for development)
#    npm start (for production)

# ===== SECURITY NOTES =====

# - Never share your bot token publicly
# - Keep your .env file private (it's in .gitignore)
# - Only add trusted users as admins
# - Test thoroughly before production use
